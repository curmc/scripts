#!/bin/bash

#VARS
#trying yay, if that doesn't work I'll have to grab from aur
deps="build-essential cmake git \
	python3-colcon-common-extensions \
	python3-lark-parser python3-pip \
	python-rosdep python3-vcstool \
	wget libasio-dev libtinyxml2-dev"

python_deps="argcomplete flake8 flake8-build-except \
	flake8-builtins flake8-class-newline \
	flake8-comprehensions flake8-deprecated \
	flake8-docstrings flake8-import-order \
	flake8-quotes pytest-repeat \
	pytest-rerunfailures pytest pytest-cov \
	pytest-runner setuptools"

usage="$(basename "$0") help [version|distro]
This script is used to install ros2

Arguments:
 --help     - Display this help text"


OS='Ubuntu'
VER='18.04'
FILE_BASE=$(pwd)
SHELL_TYPE=$(basename `echo $SHELL`)
DISTRO="crystal"
VERSION="desktop"

#Error out
errout () {
    echo "ERROR: $@"
    exit 1
}

#Returns linux distro / version
get_linux () {
	if [ -f /etc/os-release ]; then
    		# freedesktop.org and systemd
    		. /etc/os-release
    		OS=$NAME
    		VER=$VERSION_ID
	elif type lsb_release >/dev/null 2>&1; then
    		# linuxbase.org
    		OS=$(lsb_release -si)
    		VER=$(lsb_release -sr)
		elif [ -f /etc/lsb-release ]; then
    		# For some versions of Debian/Ubuntu without lsb_release command
    		. /etc/lsb-release
    		OS=$DISTRIB_ID
    		VER=$DISTRIB_RELEASE
	elif [ -f /etc/debian_version ]; then
    		# Older Debian/Ubuntu/etc.
    		OS=Debian
    		VER=$(cat /etc/debian_version)
	elif [ -f /etc/SuSe-release ]; then
    		# Older SuSE/etc.
    		...
	elif [ -f /etc/redhat-release ]; then
    		# Older Red Hat, CentOS, etc.
    		...
	else
    		# Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
    		OS=$(uname -s)
    		VER=$(uname -r)
	fi
	echo "Installing ROS2 on $OS $VER............................."
}


#======== UBUNTU ==========
setupUbuntu () {
    sudo apt update && sudo apt install curl gnupg2 lsb-release
    curl http://repo.ros2.org/repos.key | sudo apt-key add -
    sudo sh -c 'echo "deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/ros2-latest.list'
    sudo apt update
#    sudo apt install $deps
#    sudo python3 -m pip install $python_deps
}

installROS () {
    if [[ $1 == 'base' ]]; then
        sudo apt install ros-$2-base
    fi
    if [[ $1 == 'desktop' ]]; then
        sudo apt install ros-$2-desktop
    fi
    sudo apt install python3-colcon-common-extensions
}

setupEnvironment () { 
    if [ $VER == "18.04" ]; then
    	sudo apt install python3-argcomplete
    elif [ $VER == "16.04" ]; then
	sudo apt install python3-pip
	sudo pip3 install argcomplete
    else
	errout "Allowable Ubuntu 18.04 and 16.04"
    fi
    echo "source /opt/ros/$1/setup.$SHELL_TYPE" >> ~/.bashrc
    pushd ~
    mkdir -p ros2_ws/src/
    popd
    cp -r ./py_nodes ./ros-basic-example ~/ros2_ws/src/
    pushd ~/ros2_ws
    colcon build --symlink-install
    popd
}

install_ubuntu_ros2 () {
    setupUbuntu
    installROS $VERSION $DISTRO
    setupEnvironment $DISTRO
}



#================ ARCH ================
setupArch () {
	yay --mflags --skipinteg ros2-arch-deps
	#sudo pacman -S $deps
	#sudo python3 -m pip install python_deps
}

ROS_INSTALL_CACHE="$HOME/.cache/ros2_install"
ROS_TEMP_WS="`pwd`/ros2_ws"

grab_ros2 () {
  mkdir -p $ROS_INSTALL_CACHE/src
	cp ros2.repos $ROS_INSTALL_CACHE
	pushd $ROS_INSTALL_CACHE
	vcs import src < ros2.repos
	popd
	mkdir -p $ROS_TEMP_WS/src
	cp -r ./ros-basic-example ./py_nodes $ROS_TEMP_WS/src
}

build_ros2 () {
  pushd $ROS_INSTALL_CACHE
	sudo colcon build --merge-install --install-base /opt/ros/crystal
	echo "source /opt/ros/crystal/setup.$SHELL_TYPE" >> ~/.${SHELL_TYPE}rc
  popd
}

install_arch_ros2 () {
  echo "Before continuing yay installs without integrity checks, if you are not comfortable with this, please proceed to install all AUR repositories directly (many have failed integrity checks"
  setupArch
	grab_ros2
	build_ros2
}

get_linux


if [[ $OS == "Arch Linux" ]]; then
  echo "Before continuing yay installs without integrity checks, if you are not comfortable with this, please proceed to install all AUR repositories directly (many have failed integrity checks"
  setupArch
  grab_ros2
  build_ros2
else
    setupUbuntu
    installROS $VERSION $DISTRO
    setupEnvironment $DISTRO
fi




echo "========================================================="
echo "Successfully installed ROS2 and built packages 

ROS2 install directory /opt/ros/crystal

made ros2 workspace in ~/ros2_ws
moved ros-basic-example to ~/ros2_ws/src
built ros2 packages


Before moving on, source your under and overlay

$ source /opt/ros/crystal/setup.bash, zsh, sh

Then install the packages provided in this repository

$ cd ./ros2_ws/
$ colcon build symlink-install
$ source ./install/setup.bash zsh ...


Some steps from here

try the command

$ ros2 run minimal_pubsub publisher
$ ros2 run minimal_pubsub subscriber #in a different shell

or start building packages in ~/ros2_ws"
